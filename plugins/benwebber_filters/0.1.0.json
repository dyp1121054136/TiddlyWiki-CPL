{"title":"$:/plugins/benwebber/filters","name":"filters","description":"New and experimental filter operators","author":"Ben Webber","version":"0.1.0","core-version":">=5.0.0","source":"https://github.com/benwebber/tiddlywiki-filters","plugin-type":"plugin","list":"README","license":"MIT","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/benwebber/filters/README\":{\"title\":\"$:/plugins/benwebber/filters/README\",\"text\":\"''filters'' adds new and experimental filter operators.\\n\\n;`surround`\\n: Surround titles with text, similar to `addprefix[x]addsuffix[y]`.\\n\"},\"$:/plugins/benwebber/filters/modules/filters/surround.min.js\":{\"text\":\"\\\"use strict\\\";Object.defineProperty(exports,\\\"__esModule\\\",{value:true});exports.surround=void 0;function surround(source,operator,_options){const left=operator.operands[0]||\\\"\\\";const right=operator.operands[1]===undefined?left:operator.operands[1];const results=[];source(((_tiddler,title)=>{results.push(`${left}${title}${right}`)}));return results}exports.surround=surround;\",\"title\":\"$:/plugins/benwebber/filters/modules/filters/surround.min.js\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/plugins/benwebber/filters/modules/filters/tsort.min.js\":{\"text\":\"\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.tsort = void 0;\\nfunction tsort(source, operator, _options) {\\n    const field = operator.operands[0] || 'list';\\n    const graph = {};\\n    const inDegrees = {};\\n    source((tiddler, title) => {\\n        if (!tiddler) {\\n            return;\\n        }\\n        const list = tiddler.getFieldList(field);\\n        graph[title] = list;\\n        if (inDegrees[title] == null) {\\n            inDegrees[title] = 0;\\n        }\\n        for (const listTitle of list) {\\n            if (inDegrees[listTitle] == null) {\\n                inDegrees[listTitle] = 0;\\n            }\\n            else {\\n                inDegrees[listTitle] += 1;\\n            }\\n        }\\n    });\\n    const empty = [];\\n    for (const [key, value] of Object.entries(inDegrees)) {\\n        if (value === 0) {\\n            empty.push(key);\\n        }\\n    }\\n    const output = [];\\n    while (empty.length > 0) {\\n        const title = empty.pop();\\n        if (title != null) { // why is this necessary, pop() returns string | undefined\\n            output.push(title);\\n            for (const dep of graph[title]) {\\n                inDegrees[dep] -= 1;\\n                if (inDegrees[dep] === 0) {\\n                    empty.push(dep);\\n                }\\n            }\\n        }\\n    }\\n    if (output.length !== Object.keys(inDegrees).length) {\\n        return [];\\n    }\\n    else {\\n        return output.reverse(); // ?\\n    }\\n}\\nexports.tsort = tsort;\\n\",\"title\":\"$:/plugins/benwebber/filters/modules/filters/tsort.min.js\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"}}}"}