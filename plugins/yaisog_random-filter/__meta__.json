{"title":"$:/plugins/yaisog/random-filter","author":"yaisog","name":"random-filter","description":"generate random numbers within a range","readme":"<$button class=\"tc-btn-invisible\" style=\"overflow: hidden;white-space: pre;width: 100%;\" message=\"tm-open-external-window\" param=\"https://yaisog.tiddlyhost.com/\">{{$:/core/images/home-button}} <$text text=\"https://yaisog.tiddlyhost.com/\"/></$button>\n\n<!-- definitions for the Lotto example -->\n\\define set-size() 49\n\\define number-of-draws() 6\n\n\\define shuffle() [enlist<accumulator>remove<currentTiddler>append<currentTiddler>join[ ]]\n\\define map-position-to-item() [enlist<accumulator>nth<currentTiddler>reduce<shuffle>,<accumulator>]\n<!-- /Lotto -->\n\n|!purpose |generate a random number, optionally in a specified range |\n|!input |ignored |\n|!parameter |`N` = a maximum value or a range specification, see below |\n|!output |a random number |\n\n\nThe `random` filter operator is used to generate a single random number.\n\nThe behavior of the operator depends on the number of parameters `N`:\n\n|!Syntax |!Output |\n|`random[]` |a random value 0 or 1 |\n|`random[<max>]`|a random integer between 0 and `<max>` |\n|`random[<min>],[<max>]`|a random integer between `<min>` and `<max>` |\n\nThe endpoints of the specified range, `<min>` and `<max>`, are included in the possible outputs of the operator.\n\n''Important Notice''<br>\nThe output of `random` will change with each page refresh (see examples below). In order to e.g. display a random tiddler that does not change with every keystroke or mouse click, use an action widget to save a random number to a (temporary) tiddler and use that tiddler's value. The action widget could be triggered by e.g. a startup action, a button click or even a timer (requires additional plugin). <br>\nRefer to the last three examples below.\n\n!! Examples\n\n!!! Random number within a range\nRandom number between 50 and 100: ''<$text text={{{ [random[50],[100]] }}} />''\n\n```\n[random[50],[100]]\n```\n\n!!! Fixed-point random number\nRandom fixed-point number (5 digits) between 0 and 1: ''<$text text={{{ [random[100000]divide[100000]] }}} />''\n\n```\n[random[100000]divide[100000]]\n```\n\n!!! List of random numbers\n5 random numbers between 1 and 12: ''<$text text={{{ [range[5]] :map[random[1],[12]] +[join[ ]] }}} />''\n\n```\n[range[5]] :map[random[1],[12]]\n```\n\n!!! Random time\nRandom unix timestamp in the year 2023: \n''<$let min={{{ [[2023-01-01]format:date[TIMESTAMP]] }}} max={{{ [[2024-01-01]format:date[TIMESTAMP]subtract[1]] }}}>\n<$text text={{{ [random<min>,<max>] }}} />\n</$let>''<br>\n(~TiddlyWiki currently has no means to convert unix timestamps back to intelligible dates without an additional plugin)\n\n```\n<$let min={{{ [[2023-01-01]format:date[TIMESTAMP]] }}}\n      max={{{ [[2024-01-01]format:date[TIMESTAMP]subtract[1]] }}}>\n  <$text text={{{ [random<min>,<max>] }}} />\n</$let>\n```\n\n!!! Persistent random number\nOnly updated when a corresponding action is triggered\n<$button actions=\"\"\"<$action-setfield $tiddler=\"$:/temp/persistent-random\" $value={{{ [random[10000]] }}} />\"\"\">\nClick here\n</$button>\n''<$view tiddler=\"$:/temp/persistent-random\" />''\n\n```\n<$button actions=\"\"\"<$action-setfield $tiddler=\"$:/temp/persistent-random\" $value={{{ [random[10000]] }}} />\"\"\">\n  <$view tiddler=\"$:/temp/persistent-random\">\n    Click here\n  </$view>\n</$button>\n```\n\n!!! Persistent Random Tiddler\nRandom shadow tiddler from current wiki:\n<$let numberOfShadows={{{ [all[shadows]count[]] }}}>\n<$button actions=\"\"\"<$action-setfield $tiddler=\"$:/temp/persistent-shadow\" $value={{{ [random<numberOfShadows>] }}} />\"\"\">\nClick here\n</$button>\n</$let>\n<$reveal type=\"nomatch\" text=\"\" state=\"$:/temp/persistent-shadow\">\n<$text text={{{ [all[shadows]sort[]nth{$:/temp/persistent-shadow}] }}} />\n</$reveal>\n\n```\n<$let numberOfShadows={{{ [all[shadows]count[]] }}}>\n  <$button actions=\"\"\"<$action-setfield $tiddler=\"$:/temp/persistent-shadow\" $value={{{ [random<numberOfShadows>] }}} />\"\"\">\n    Click here\n  </$button>\n</$let>\n<$reveal type=\"nomatch\" text=\"\" state=\"$:/temp/persistent-shadow\">\n  <$text text={{{ [all[shadows]sort[]nth{$:/temp/persistent-shadow}] }}} />\n</$reveal>\n```\n\n!!! Lotto\n6 drawings from the set [1,49] without replacement: \n<$let itemList={{{ [range<set-size>join[ ]] }}}\n\t\t\trangeEnd={{{ [<set-size>subtract<number-of-draws>add[1]] }}}>\n\t<$button actions=\"\"\"<$action-setfield $tiddler=\"$:/temp/random-lotto\" $value={{{ [range<set-size>,<rangeEnd>] :map[random[1],<currentTiddler>] +[join[ ]] }}} />\"\"\">\n\t\tPlay Lotto!\n\t</$button>\n  ''<$text text={{{ [enlist:raw{$:/temp/random-lotto}reduce<map-position-to-item>,<itemList>enlist-input[]last<number-of-draws>nsort[]join[ ]] }}} />''\n</$let>\n\n```\n\\define set-size() 49\n\\define number-of-draws() 6\n\n\\define shuffle() [enlist<accumulator>remove<currentTiddler>append<currentTiddler>join[ ]]\n\\define map-position-to-item() [enlist<accumulator>nth<currentTiddler>reduce<shuffle>,<accumulator>]\n\n<$let itemList={{{ [range<set-size>join[ ]] }}}\n\t\t\trangeEnd={{{ [<set-size>subtract<number-of-draws>add[1]] }}}>\n\t<$button actions=\"\"\"<$action-setfield $tiddler=\"$:/temp/random-lotto\" $value={{{ [range<set-size>,<rangeEnd>] :map[random[1],<currentTiddler>] +[join[ ]] }}} />\"\"\">\n\t\tPlay Lotto!\n\t</$button>\n  ''<$text text={{{ [enlist:raw{$:/temp/random-lotto}reduce<map-position-to-item>,<itemList>enlist-input[]last<number-of-draws>nsort[]join[ ]] }}} />''\n</$let>\n```\nSee [[this post on TWTalk|https://talk.tiddlywiki.org/t/filter-operator-to-generate-random-numbers/6017/6]] for an explanation how the conceptually very similar list scramble works.\n\n\n---\n\nHat tip to Mario Pietsch for the &lt;min&gt; idea and to Jeremy Ruston for the persistent storage idea.","version":"0.9.2","plugin-type":"plugin","requires-reload":false,"category":"Unknown","type":"application/json","latest":"0.9.2","versions":["0.9.2"]}