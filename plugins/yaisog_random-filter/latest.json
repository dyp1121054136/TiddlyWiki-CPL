{"created":"20230125181608256","text":"{\"tiddlers\": {\n\"$:/plugins/yaisog/random-filter/history\": {\n    \"created\": \"20230125181823171\",\n    \"text\": \"| ''0.9.2'' | 2023-01-28 |renamed code tiddler to put it into the `$:/plugins` hierarchy |\\n| ''0.9.1'' | 2023-01-26 |added //Lotto// example |\\n| ''0.9.0'' | 2023-01-25 |initial release |\\n\",\n    \"title\": \"$:/plugins/yaisog/random-filter/history\",\n    \"modified\": \"20230128102603037\",\n    \"tags\": \"\",\n    \"type\": \"text/vnd.tiddlywiki\"\n},\n\n\"$:/plugins/yaisog/random-filter/license\": {\n    \"created\": \"20230125181823172\",\n    \"text\": \"Distributed under an MIT license.\\n\\nCopyright (c) 2023 [[Yaisog Bonegnasher|https://github.com/yaisog]]\\n\\n<<<\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n<<<\",\n    \"title\": \"$:/plugins/yaisog/random-filter/license\",\n    \"modified\": \"20230125181907659\",\n    \"tags\": \"\",\n    \"type\": \"text/vnd.tiddlywiki\"\n},\n\n\"$:/plugins/yaisog/random-filter/readme\": {\n    \"created\": \"20230125181823172\",\n    \"text\": \"<!-- definitions for the Lotto example -->\\n\\\\define set-size() 49\\n\\\\define number-of-draws() 6\\n\\n\\\\define shuffle() [enlist<accumulator>remove<currentTiddler>append<currentTiddler>join[ ]]\\n\\\\define map-position-to-item() [enlist<accumulator>nth<currentTiddler>reduce<shuffle>,<accumulator>]\\n<!-- /Lotto -->\\n\\n|!purpose |generate a random number, optionally in a specified range |\\n|!input |ignored |\\n|!parameter |`N` = a maximum value or a range specification, see below |\\n|!output |a random number |\\n\\n\\nThe `random` filter operator is used to generate a single random number.\\n\\nThe behavior of the operator depends on the number of parameters `N`:\\n\\n|!Syntax |!Output |\\n|`random[]` |a random value 0 or 1 |\\n|`random[<max>]`|a random integer between 0 and `<max>` |\\n|`random[<min>],[<max>]`|a random integer between `<min>` and `<max>` |\\n\\nThe endpoints of the specified range, `<min>` and `<max>`, are included in the possible outputs of the operator.\\n\\n''Important Notice''<br>\\nThe output of `random` will change with each page refresh (see examples below). In order to e.g. display a random tiddler that does not change with every keystroke or mouse click, use an action widget to save a random number to a (temporary) tiddler and use that tiddler's value. The action widget could be triggered by e.g. a startup action, a button click or even a timer (requires additional plugin). <br>\\nRefer to the last three examples below.\\n\\n!! Examples\\n\\n!!! Random number within a range\\nRandom number between 50 and 100: ''<$text text={{{ [random[50],[100]] }}} />''\\n\\n```\\n[random[50],[100]]\\n```\\n\\n!!! Fixed-point random number\\nRandom fixed-point number (5 digits) between 0 and 1: ''<$text text={{{ [random[100000]divide[100000]] }}} />''\\n\\n```\\n[random[100000]divide[100000]]\\n```\\n\\n!!! List of random numbers\\n5 random numbers between 1 and 12: ''<$text text={{{ [range[5]] :map[random[1],[12]] +[join[ ]] }}} />''\\n\\n```\\n[range[5]] :map[random[1],[12]]\\n```\\n\\n!!! Random time\\nRandom unix timestamp in the year 2023: \\n''<$let min={{{ [[2023-01-01]format:date[TIMESTAMP]] }}} max={{{ [[2024-01-01]format:date[TIMESTAMP]subtract[1]] }}}>\\n<$text text={{{ [random<min>,<max>] }}} />\\n</$let>''<br>\\n(~TiddlyWiki currently has no means to convert unix timestamps back to intelligible dates without an additional plugin)\\n\\n```\\n<$let min={{{ [[2023-01-01]format:date[TIMESTAMP]] }}}\\n      max={{{ [[2024-01-01]format:date[TIMESTAMP]subtract[1]] }}}>\\n  <$text text={{{ [random<min>,<max>] }}} />\\n</$let>\\n```\\n\\n!!! Persistent random number\\nOnly updated when a corresponding action is triggered\\n<$button actions=\\\"\\\"\\\"<$action-setfield $tiddler=\\\"$:/temp/persistent-random\\\" $value={{{ [random[10000]] }}} />\\\"\\\"\\\">\\nClick here\\n</$button>\\n''<$view tiddler=\\\"$:/temp/persistent-random\\\" />''\\n\\n```\\n<$button actions=\\\"\\\"\\\"<$action-setfield $tiddler=\\\"$:/temp/persistent-random\\\" $value={{{ [random[10000]] }}} />\\\"\\\"\\\">\\n  <$view tiddler=\\\"$:/temp/persistent-random\\\">\\n    Click here\\n  </$view>\\n</$button>\\n```\\n\\n!!! Persistent Random Tiddler\\nRandom shadow tiddler from current wiki:\\n<$let numberOfShadows={{{ [all[shadows]count[]] }}}>\\n<$button actions=\\\"\\\"\\\"<$action-setfield $tiddler=\\\"$:/temp/persistent-shadow\\\" $value={{{ [random<numberOfShadows>] }}} />\\\"\\\"\\\">\\nClick here\\n</$button>\\n</$let>\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=\\\"$:/temp/persistent-shadow\\\">\\n<$text text={{{ [all[shadows]sort[]nth{$:/temp/persistent-shadow}] }}} />\\n</$reveal>\\n\\n```\\n<$let numberOfShadows={{{ [all[shadows]count[]] }}}>\\n  <$button actions=\\\"\\\"\\\"<$action-setfield $tiddler=\\\"$:/temp/persistent-shadow\\\" $value={{{ [random<numberOfShadows>] }}} />\\\"\\\"\\\">\\n    Click here\\n  </$button>\\n</$let>\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=\\\"$:/temp/persistent-shadow\\\">\\n  <$text text={{{ [all[shadows]sort[]nth{$:/temp/persistent-shadow}] }}} />\\n</$reveal>\\n```\\n\\n!!! Lotto\\n6 drawings from the set [1,49] without replacement: \\n<$let itemList={{{ [range<set-size>join[ ]] }}}\\n\\t\\t\\trangeEnd={{{ [<set-size>subtract<number-of-draws>add[1]] }}}>\\n\\t<$button actions=\\\"\\\"\\\"<$action-setfield $tiddler=\\\"$:/temp/random-lotto\\\" $value={{{ [range<set-size>,<rangeEnd>] :map[random[1],<currentTiddler>] +[join[ ]] }}} />\\\"\\\"\\\">\\n\\t\\tPlay Lotto!\\n\\t</$button>\\n  ''<$text text={{{ [enlist:raw{$:/temp/random-lotto}reduce<map-position-to-item>,<itemList>enlist-input[]last<number-of-draws>nsort[]join[ ]] }}} />''\\n</$let>\\n\\n```\\n\\\\define set-size() 49\\n\\\\define number-of-draws() 6\\n\\n\\\\define shuffle() [enlist<accumulator>remove<currentTiddler>append<currentTiddler>join[ ]]\\n\\\\define map-position-to-item() [enlist<accumulator>nth<currentTiddler>reduce<shuffle>,<accumulator>]\\n\\n<$let itemList={{{ [range<set-size>join[ ]] }}}\\n\\t\\t\\trangeEnd={{{ [<set-size>subtract<number-of-draws>add[1]] }}}>\\n\\t<$button actions=\\\"\\\"\\\"<$action-setfield $tiddler=\\\"$:/temp/random-lotto\\\" $value={{{ [range<set-size>,<rangeEnd>] :map[random[1],<currentTiddler>] +[join[ ]] }}} />\\\"\\\"\\\">\\n\\t\\tPlay Lotto!\\n\\t</$button>\\n  ''<$text text={{{ [enlist:raw{$:/temp/random-lotto}reduce<map-position-to-item>,<itemList>enlist-input[]last<number-of-draws>nsort[]join[ ]] }}} />''\\n</$let>\\n```\\nSee [[this post on TWTalk|https://talk.tiddlywiki.org/t/filter-operator-to-generate-random-numbers/6017/6]] for an explanation how the conceptually very similar list scramble works.\\n\\n\\n---\\n\\nHat tip to Mario Pietsch for the &lt;min&gt; idea and to Jeremy Ruston for the persistent storage idea.\",\n    \"title\": \"$:/plugins/yaisog/random-filter/readme\",\n    \"modified\": \"20230128095725257\",\n    \"tags\": \"\",\n    \"type\": \"text/vnd.tiddlywiki\"\n},\n\n\"$:/plugins/yaisog/modules/filters/random.js\": {\n    \"created\": \"20230125160607233\",\n    \"text\": \"/*\\\\\\ntitle: $:/plugins/yaisog/modules/filters/random.js\\ntype: application/javascript\\nmodule-type: filteroperator\\nFilter operator for generating a random integer value within optional limits.\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.random = function(source,operator,options) {\\n\\tvar results = [];\\n\\tvar min, max, number,\\n\\t\\t\\tparts = operator.operands || [];\\n\\tswitch(parts.length) {\\n\\t\\tcase 1:\\n\\t\\t\\tmin = 0;\\n\\t\\t\\tmax = $tw.utils.getInt(parts[0],1);\\n\\t\\t\\tbreak;\\n\\t\\tcase 2:\\n\\t\\t\\tmin = $tw.utils.getInt(parts[0],0);\\n\\t\\t\\tmax = $tw.utils.getInt(parts[1],1);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\treturn [\\\"random: too many parameters\\\"];\\n\\t}\\n\\tnumber = Math.floor(Math.random() * (max - min + 1) + min);\\n\\tresults.push(number.toString());\\n\\treturn results;\\n};\\n\\n})();\",\n    \"title\": \"$:/plugins/yaisog/modules/filters/random.js\",\n    \"type\": \"application/javascript\",\n    \"module-type\": \"filteroperator\",\n    \"tags\": \"\",\n    \"modified\": \"20230128090208717\"\n}}\n}","title":"$:/plugins/yaisog/random-filter","type":"application/json","tags":"","modified":"20230128102249619","version":"0.9.2","name":"random Filter Operator","description":"Adds a filter to generate random numbers.","author":"Yaisog Bonegnasher","list":"readme license history","plugin-type":"plugin","packaged-by":"Gatha on 28th January 2023, 11:26:06"}