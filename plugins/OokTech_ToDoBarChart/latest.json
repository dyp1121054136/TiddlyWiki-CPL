{"title":"$:/plugins/OokTech/ToDoBarChart","description":"A plugin to add hidden message to images","author":"inmysocks","version":"0.0.1","core-version":">=5.1.13","source":"","list":"[[$:/plugins/OokTech/TiddlySteganography/ReadMe]]","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\n    \"tiddlers\": {\n        \"BarChart Test\": {\n            \"title\": \"BarChart Test\",\n            \"text\": \"<table>\\n<tr>\\n<$list filter='[list[!!progress]]' variable=CurrentStep>\\n<td class='progress-style'><$count filter='[list[!!progress]allbefore<CurrentStep>][[dummy]]'/> - <<CurrentStep>></td>\\n</$list>\\n</tr>\\n</table>\\n\"\n        },\n        \"$:/plugins/OokTech/ProgressBar/ProgressBar.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/OokTech/ProgressBar/ProgressBar.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nA widget that creates a progress bar with progress defined by filters.\\n\\nThe most basic usage takes two filters, one for finished and one for unfinished.\\nThe total is defined as the total number of tiddlers returned by both filters\\nThe progress is shown as the percentage of tiddlers from the finished filter in\\ngreen, the remaining part of the bar is shown in red. Percentages are shown for\\nboth finished and unfinished parts.\\n\\nBasic usage:\\n\\nTo make a progress bar that shows the a returned by [tag[task]!tag[done]] as\\nunfinished and [task[done]tag[done]]\\n<$ProgressBar/>\\n\\n<$ProgressBar finished=<<finishedFilter>> unfinished=<<unfinishedFilter>>\\n\\nAdvanced usage:\\n\\nyou can give a comma separated list of filters, each filter represents one segment of the bar, the color list determines the colors for each segment. If there are more segments than colors than the color list is repeated.\\n\\n<$ProgressBar filters=\\\"comma separated list of filters\\\" colors=\\\"comma separated list of colors\\\"/>\\n\\n\\\\*/\\n\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\nvar widgets;\\nvar container;\\n\\nvar ProgressBar = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nProgressBar.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nProgressBar.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar domNode = this.document.createElement(\\\"div\\\");\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nProgressBar.prototype.execute = function() {\\n\\t//Get widget attributes.\\n\\tthis.finishedFilter = this.getAttribute(\\\"finished\\\", '[tag[task]tag[done]]');\\n\\tthis.unfinishedFilter = this.getAttribute(\\\"unfinished\\\", '[tag[task]!tag[done]]');\\n\\tvar TotalWidth = this.getAttribute(\\\"width\\\",\\\"100\\\");\\n\\tvar widthUnit = this.getAttribute(\\\"unit\\\", \\\"%\\\");\\n\\tvar filters = this.getAttribute(\\\"filters\\\");\\n\\tvar colors = this.getAttribute(\\\"colors\\\");\\n\\n\\tif (filters) {\\n\\t\\tvar groups = {};\\n\\t\\tvar Total = 0;\\n\\t\\tvar filterList = filters.split(\\\",\\\");\\n\\t\\tif (colors) {\\n\\t\\t\\tvar colorList = colors.split(\\\",\\\");\\n\\t\\t}\\n\\t\\tfor (var filter in filterList) {\\n\\t\\t\\tgroups[filter] = this.wiki.filterTiddlers(filterList[filter]);\\n\\t\\t\\tTotal += groups[filter].length;\\n\\t\\t}\\n\\t\\tvar ProgressBarString = \\\"<div style='width:100%;'>\\\";\\n\\t\\tvar thisColor = 'red';\\n\\t\\tvar border = \\\"\\\";\\n\\t\\tif (!colorList) {\\n\\t\\t\\tvar colorList = ['red','green'];\\n\\t\\t}\\n\\t\\tfor (var group in groups) {\\n\\t\\t\\tif (group == 0) {\\n\\t\\t\\t\\tborder = \\\"border-radius:10px 0px 0px 10px;\\\";\\n\\t\\t\\t} else if (group == Object.keys(groups).length-1) {\\n\\t\\t\\t\\tborder = \\\"border-radius:0px 10px 10px 0px;\\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tborder = \\\"\\\";\\n\\t\\t\\t}\\n\\t\\t\\tif (colorList) {\\n\\t\\t\\t\\tthisColor = colorList[group%colorList.length];\\n\\t\\t\\t}\\n\\t\\t\\tProgressBarString += \\\"<div style='width:\\\" + groups[group].length/Total*TotalWidth + widthUnit + \\\";background-color:\\\" + thisColor + \\\";display:inline-block;text-align:center;\\\" + border + \\\"'>\\\" + Math.round(groups[group].length/Total*100) + \\\"%</div>\\\";\\n\\t\\t}\\n\\t\\tProgressBarString += \\\"</div>\\\";\\n\\t} else {\\n\\t\\tvar finishedList = this.wiki.filterTiddlers(this.finishedFilter);\\n\\t\\tvar unfinishedList = this.wiki.filterTiddlers(this.unfinishedFilter);\\n\\t\\tthis.OldFinishedLength = finishedList.length;\\n\\t\\tthis.OldUnfinishedLength = unfinishedList.length;\\n\\n\\t\\tvar finished = finishedList.length;\\n\\t\\tvar unfinished = unfinishedList.length;\\n\\t\\tvar Total = finishedList.length + unfinishedList.length;\\n\\t\\tvar finishedPortion = finished/Total;\\n\\t\\tvar unfinishedPortion = unfinished/Total;\\n\\t\\tvar finishedPercent = Math.floor(finishedPortion*100);\\n\\t\\tvar unfinishedPercent = Math.floor(unfinishedPortion*100);\\n\\t\\tvar ProgressBarString = \\\"<div style='width:100%'>\\\";\\n\\t\\tif (finishedPortion > 0) {\\n\\t\\t\\tProgressBarString += \\\"<div style='width:\\\" + finishedPortion*TotalWidth + widthUnit + \\\";background-color:green;display:inline-block;text-align:center;'>\\\" + finishedPercent + \\\"%</div>\\\";\\n\\t\\t}\\n\\t\\tif (unfinishedPortion > 0) {\\n\\t\\t\\tProgressBarString += \\\"<div style='width:\\\" + unfinishedPortion*TotalWidth + widthUnit + \\\";background-color:red;display:inline-block;text-align:center;'>\\\" + unfinishedPercent + \\\"%</div>\\\";\\n\\t\\t}\\n\\t\\tProgressBarString += \\\"</div>\\\";\\n\\t}\\n\\n\\tvar parser = this.wiki.parseText(\\\"text/vnd.tiddlywiki\\\",ProgressBarString,{parseAsInline: false});\\n\\tvar parseTreeNodes = parser ? parser.tree : [];\\n\\tthis.makeChildWidgets(parseTreeNodes);\\n\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nProgressBar.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(Object.keys(changedAttributes).length || this.OldUnfinishedLength !== this.wiki.filterTiddlers(this.unfinishedFilter) || this.OldFinishedLength !== this.wiki.filterTiddlers(this.finishedFilter)) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports[\\\"ProgressBar\\\"] = ProgressBar;\\n\\n})();\\n\",\n            \"title\": \"$:/plugins/OokTech/ProgressBar/ProgressBar.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        },\n        \"stylesheet\": {\n            \"title\": \"stylesheet\",\n            \"tags\": \"$:/tags/Stylesheet\",\n            \"text\": \"<$list filter='[list[New Tiddler!!progress]]'>\\n\\n.progress-style:nth-child(<$count filter='[list[New Tiddler!!progress]allbefore<currentTiddler>][[dummy]]'/>) {\\nheight:50px;\\nwidth: calc(<$count filter='[list[New Tiddler!!progress]allbefore<currentTiddler>][[dummy]][[dummy2]][[dummy3]][[dummy4]]'/>em);\\nbackground-color:#<$count filter='[list[New Tiddler!!progress]allafter<currentTiddler>][[dummy]][[dummy2]]'/>C<$count filter='[list[New Tiddler!!progress]allafter<currentTiddler>][[dummy]][[dummy2]]'/>;\\ntext-align:center;\\n}\\n</$list>\\n\"\n        }\n    }\n}","name":"ToDoBarChart"}