{"title":"$:/plugins/OokTech/BarChart","description":"A plugin to add simple bar charts to tiddlywiki","author":"OokTech","version":"0.0.212","core-version":">=5.1.13","source":"","list":"[[$:/plugins/OokTech/BarChart/ReadMe]]","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\n    \"tiddlers\": {\n        \"Bar Chart Creator\": {\n            \"title\": \"Bar Chart Creator\",\n            \"text\": \"\\\\define thisInnerShowCode() <$~ProgressBar\\n\\n\\\\define thisShowCode(code:ProgressBar)\\n<pre>\\n<<thisInnerShowCode>>\\n    filters=<$text text='\\\"\\\"\\\"'/>{{$:/temp/InteractiveDemo!!filters}}<$text text='\\\"\\\"\\\"'/>\\n    colors=<$text text='\\\"\\\"\\\"'/>{{$:/temp/InteractiveDemo!!colors}}<$text text='\\\"\\\"\\\"'/>\\n    mode=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!mode}}<$text text='\\\"'/>\\n    orientation=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!orientation}}<$text text='\\\"'/>\\n    side=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!side}}<$text text='\\\"'/>\\n    class=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!class}}<$text text='\\\"'/>\\n    width=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!width}}<$text text='\\\"'/>\\n    width-unit=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!width-unit}}<$text text='\\\"'/>\\n    height=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!height}}<$text text='\\\"'/>\\n    height-unit=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!height-unit}}<$text text='\\\"'/>\\n    vertical=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!vertical}}<$text text='\\\"'/>\\n    label=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!label}}<$text text='\\\"'/>\\n/>\\n</pre>\\n\\\\end\\n\\nThis is both a demo of the sort of charts you can make using this plugin and a tool for creating charts without having to remember the syntax. Just select the options you want below and then copy the code into a tiddler where you want the chart.\\n\\n<table style='width:100%'>\\n    <tr>\\n        <th>\\n            filters\\n        </th>\\n        <td\\n            colspan=2\\n        >\\n            <$edit-text\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='filters'\\n                class='tc-edit-texteditor'\\n            />\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            colors\\n        </th>\\n        <td\\n            colspan=2\\n        >\\n            <$edit-text\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='colors'\\n                class='tc-edit-texteditor'\\n            />\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            orientation\\n        </th>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='orientation'\\n                value='vertical'\\n            >\\n                vertical\\n            </$radio>\\n        </td>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='orientation'\\n                value='horizontal'\\n            >\\n                horizontal\\n            </$radio>\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            mode\\n        </th>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='mode'\\n                value='stacked'\\n            >\\n                stacked\\n            </$radio>\\n        </td>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='mode'\\n                value='bars'\\n            >\\n                bars\\n            </$radio>\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            side\\n        </th>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='side'\\n                value='left'\\n            >\\n                left\\n            </$radio>\\n        </td>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='side'\\n                value='right'\\n            >\\n                right\\n            </$radio>\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            vertical\\n        </th>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='vertical'\\n                value=top\\n            >\\n                top\\n            </$radio>\\n        </td>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='vertical'\\n                value='bottom'\\n            >\\n                bottom\\n            </$radio>\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            width\\n        </th>\\n        <td>\\n            <$edit-text\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='width'\\n                class='tc-edit-texteditor'\\n            />\\n        </td>\\n        <td>\\n            <$select\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='width-unit'\\n            >\\n                <$list\\n                    filter='% em px ex cm mm in pt pc ch rem vw vh vmin vmax'\\n                >\\n                    <option>\\n                        <<currentTiddler>>\\n                    </option>\\n                </$list>\\n            </$select>\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            height\\n        </th>\\n        <td>\\n            <$edit-text\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='height'\\n                class='tc-edit-texteditor'\\n            />\\n        </td>\\n        <td>\\n            <$select\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='height-unit'\\n            >\\n                <$list\\n                    filter='% em px ex cm mm in pt pc ch rem vw vh vmin vmax'\\n                >\\n                    <option>\\n                        <<currentTiddler>>\\n                    </option>\\n                </$list>\\n            </$select>\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            label\\n        </th>\\n        <td\\n            colspan=2\\n        >\\n            <$select\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='label'\\n            >\\n                <option\\n                    value=''\\n                >\\n                    //None//\\n                </option>\\n                <$list\\n                    filter='% n nofm'\\n                >\\n                    <option>\\n                        <<currentTiddler>>\\n                    </option>\\n                </$list>\\n            </$select>\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            class\\n        </th>\\n        <td\\n            colspan=2\\n        >\\n            <$select\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='class'\\n            >\\n                <option\\n                    value=''\\n                >\\n                    //Default//\\n                </option>\\n                <$list\\n                    filter='progress-bar-vertical progress-bar-horizontal bar-chart-horizontal-left bar-chart-horizontal-right'\\n                >\\n                    <option>\\n                        <<currentTiddler>>\\n                    </option>\\n                </$list>\\n            </$select>\\n        </td>\\n    </tr>\\n</table>\\n\\n\\nCode:\\n\\n<<thisShowCode>>\\n\\n\\n<$ProgressBar\\n    filters={{$:/temp/InteractiveDemo!!filters}}\\n    colors={{$:/temp/InteractiveDemo!!colors}}\\n    mode={{$:/temp/InteractiveDemo!!mode}}\\n    orientation={{$:/temp/InteractiveDemo!!orientation}}\\n    side={{$:/temp/InteractiveDemo!!side}}\\n    class={{$:/temp/InteractiveDemo!!class}}\\n    width={{$:/temp/InteractiveDemo!!width}}\\n    width-unit={{$:/temp/InteractiveDemo!!width-unit}}\\n    height={{$:/temp/InteractiveDemo!!height}}\\n    height-unit={{$:/temp/InteractiveDemo!!height-unit}}\\n    vertical={{$:/temp/InteractiveDemo!!vertical}}\\n    label={{$:/temp/InteractiveDemo!!label}}\\n/>\\n\"\n        },\n        \"$:/plugins/OokTech/BarChart/Acknowledgements\": {\n            \"title\": \"$:/plugins/OokTech/BarChart/Acknowledgements\",\n            \"text\": \" This plugin was created and is maintained by [[OokTech|$:/plugins/OokTech/OokTechInfo]].\\n\\n\\n[[Tiddlywiki|http://TiddlyWiki.com]] was originally created by [[Jeremy Ruston|https://github.com/Jermolene/TiddlyWiki5]]. For general ~TiddlyWiki help see [[tiddlywiki.com|http://tiddlywiki.com]] or the [[google group|https://groups.google.com/forum/#!forum/tiddlywiki]].\\n\\nThank you to the general TiddlyWiki community for developing and maintaining the tiddlywiki core.\\n\"\n        },\n        \"$:/plugins/OokTech/BarChart/License\": {\n            \"title\": \"$:/plugins/OokTech/BarChart/License\",\n            \"text\": \"BSD 3-Clause License\\n\\nCopyright (c) 2017, OokTech LLC\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n* Redistributions of source code must retain the above copyright notice, this\\n  list of conditions and the following disclaimer.\\n\\n* Redistributions in binary form must reproduce the above copyright notice,\\n  this list of conditions and the following disclaimer in the documentation\\n  and/or other materials provided with the distribution.\\n\\n* Neither the name of the copyright holder nor the names of its\\n  contributors may be used to endorse or promote products derived from\\n  this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n        },\n        \"$:/plugins/OokTech/OokTechInfo\": {\n            \"title\": \"$:/plugins/OokTech/OokTechInfo\",\n            \"text\": \"~OokTech is a small engineering company based in the USA with an international presence. We work on open software and hardware projects.\\n\\nWebsite: http://Ooktech.com<br>\\n~GitHub: [[OokTech GitHub|https://github.com/OokTech]]\\n\"\n        },\n        \"$:/pluginlibrary/OokTech/OokTechPlugins\": {\n            \"title\": \"$:/pluginlibrary/OokTech/OokTechPlugins\",\n            \"tags\": \"$:/tags/PluginLibrary\",\n            \"url\": \"https://ooktech.com/TiddlyWiki/PluginLibrary\",\n            \"text\": \"The plugin library for plugins developed and maintained by OokTech. See http://OokTech.com/TiddlyWiki for more information.\\n\"\n        },\n        \"$:/plugins/OokTech/ProgressBar/ProgressBar.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/OokTech/ProgressBar/ProgressBar.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nA widget that creates a progress bar with progress defined by filters.\\n\\nThe most basic usage takes two filters, one for finished and one for unfinished.\\nThe total is defined as the total number of tiddlers returned by both filters\\nThe progress is shown as the percentage of tiddlers from the finished filter in\\ngreen, the remaining part of the bar is shown in red. Percentages are shown for\\nboth finished and unfinished parts.\\n\\nBasic usage:\\n\\nTo make a progress bar that shows the a returned by [tag[task]!tag[done]] as\\nunfinished and [task[done]tag[done]] and uses the default class just put\\n\\n<$ProgressBar/>\\n\\nto specify the filters used to determine the number of finished and unfinished tasks use:\\n\\n<$ProgressBar finished=<<finishedFilter>> unfinished=<<unfinishedFilter>>/>\\n\\nAdvanced usage:\\n\\nyou can give a comma separated list of filters, each filter represents one segment of the bar, the color list determines the colors for each segment. If there are more segments than colors than the color list is repeated. You can also give a css class that will be used instead of the default css:\\n\\n<$ProgressBar filters=\\\"comma separated list of filters\\\" colors=\\\"comma separated list of colors\\\" class=\\\"custom-class\\\"/>\\n\\n\\\\*/\\n\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\nvar widgets;\\nvar container;\\n\\nvar ProgressBar = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nProgressBar.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nProgressBar.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar domNode = this.document.createElement(\\\"div\\\");\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nProgressBar.prototype.execute = function() {\\n\\t//Get widget attributes.\\n\\tthis.finishedFilter = this.getAttribute(\\\"finished\\\", '[tag[task]tag[done]]');\\n\\tthis.unfinishedFilter = this.getAttribute(\\\"unfinished\\\", '[tag[task]!tag[done]]');\\n\\tthis.filters = this.getAttribute(\\\"filters\\\");\\n\\tvar TotalWidth = this.getAttribute(\\\"width\\\",\\\"100\\\");\\n\\tvar TotalHeight = this.getAttribute(\\\"height\\\",\\\"1.5\\\");\\n\\tvar widthUnit = this.getAttribute(\\\"width-unit\\\", \\\"%\\\");\\n\\tvar heightUnit = this.getAttribute(\\\"height-unit\\\", \\\"em\\\");\\n\\tvar colors = this.getAttribute(\\\"colors\\\");\\n\\tvar barClass = this.getAttribute(\\\"class\\\");\\n\\tvar mode = this.getAttribute(\\\"mode\\\", \\\"stacked\\\");\\n\\tvar orientation = this.getAttribute(\\\"orientation\\\", \\\"horizontal\\\");\\n\\tvar side = this.getAttribute(\\\"side\\\", \\\"left\\\");\\n\\tvar vertical = this.getAttribute(\\\"vertical\\\", \\\"bottom\\\");\\n\\tvar label = this.getAttribute(\\\"label\\\", \\\"%\\\");\\n\\n\\t//This updates the current state of the bar\\n\\tvar Total = this.GetBarState();\\n\\t//This saves the state so that refreshes work correctly\\n\\tthis.OldBarState = this.BarState;\\n\\n\\t//Initialise colors\\n\\tvar colorList = ['ForestGreen','FireBrick','CadetBlue','Aquamarine'];\\n\\tvar thisColor = 'ForestGreen';\\n\\t//Get the list of colors, if any. If there isn't a color list given the\\n\\t//default defined above is used.\\n\\tif (colors) {\\n\\t\\tcolorList = colors.split(\\\",\\\");\\n\\t}\\n\\n\\tvar segments = this.BarState.split(\\\",\\\");\\n\\t//Build the html for making the progress bar\\n\\t//Outer div that sets the full height and width\\n\\tvar ProgressBarString = \\\"<div style='height:\\\" + TotalHeight + heightUnit + \\\";width:\\\" + TotalWidth + widthUnit + \\\";'>\\\";\\n\\t//Inner div that sets the classes\\n\\tProgressBarString += \\\"<div class='bar-chart \\\" + barClass;\\n\\tif (side === \\\"right\\\" && orientation !== \\\"vertical\\\") {\\n\\t\\tProgressBarString += \\\" bars-right-align \\\";\\n\\t} else {\\n\\t\\tProgressBarString += \\\" bars-left-align \\\";\\n\\t}\\n\\tif (vertical === \\\"bottom\\\") {\\n\\t\\tProgressBarString += \\\" bars-bottom-align \\\";\\n\\t} else {\\n\\t\\tProgressBarString += \\\" bars-top-align \\\";\\n\\t}\\n\\n\\tProgressBarString += \\\"' style='width:inherit;height:inherit;'>\\\";\\n\\tvar displayLabel = \\\"&nbsp;\\\";\\n\\t//Add each segment/bar to the bar in order\\n\\tfor (var segment in segments) {\\n\\t\\t//Create the label for the bar, if any\\n\\t\\tif (label === \\\"%\\\") {\\n\\t\\t\\tdisplayLabel = Math.round(segments[segment]/Total*100) + '%';\\n\\t\\t} else if (label === \\\"n\\\") {\\n\\t\\t\\tdisplayLabel = segments[segment];\\n\\t\\t} else if (label === \\\"nofm\\\") {\\n\\t\\t\\tdisplayLabel = segments[segment] + \\\" of \\\" + Total;\\n\\t\\t}\\n\\t\\t//Bar Dimension is the height for horizontal thing and the width for vertical things (the non-data dimension)\\n\\t\\tvar BarDimension = (mode === 'bars')?100/segments.length:100;\\n\\t\\t//This is the largest value from the values for the bars.\\n\\t\\tvar Maximum = (mode === \\\"bars\\\")?Math.max.apply(null, segments):Total;\\n\\t\\t//Bar size is the height for vertical things and the width for horizontal things (the data dimension)\\n\\t\\tvar BarSize = segments[segment]/Maximum*100;\\n\\t\\tvar DataDimension = (orientation === 'vertical')?\\\"height\\\":\\\"width\\\";\\n\\t\\tvar OtherDimension = (orientation === 'vertical')?\\\"width\\\":\\\"height\\\";\\n\\t\\t//If the color list is shorter than the number of segments than the\\n\\t\\t//list loops.\\n\\t\\tthisColor = colorList[segment%colorList.length];\\n\\n\\t\\tvar PrefixString = \\\"\\\";\\n\\t\\tvar SuffixString = \\\"\\\";\\n\\t\\tvar displayPart = \\\"\\\";\\n\\t\\tvar TextAlign = \\\"\\\";\\n\\n\\t\\tif (mode === 'bars') {\\n\\t\\t\\tif (orientation === 'vertical') {\\n\\t\\t\\t\\tPrefixString = \\\"<div style='height:100%;width:\\\" + BarDimension + \\\"%;'>\\\";\\n\\t\\t\\t\\tSuffixString = \\\"</div>\\\";\\n\\t\\t\\t\\tdisplayPart = \\\"display:inline-block;\\\";\\n\\t\\t\\t\\tTextAlign = \\\"text-align:center;\\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tSuffixString = \\\"<br/>\\\";\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tTextAlign = \\\"text-align:center\\\";\\n\\t\\t}\\n\\n\\t\\t//If the segment is longer than 0 or in bar mode add the segment.\\n\\t\\tif (segments[segment] > 0 || mode === 'bars') {\\n\\t\\t\\t//Create the next part of the bar\\n\\t\\t\\tProgressBarString += PrefixString + \\\"<div style='\\\" + DataDimension + \\\":\\\" + BarSize + \\\"%;\\\" + OtherDimension + \\\":\\\" + BarDimension + \\\"%;background-color:\\\" + thisColor + \\\";\\\" + displayPart + \\\";\\\" + TextAlign + \\\";'>\\\" + displayLabel + \\\"</div>\\\" + SuffixString;\\n\\t\\t}\\n\\t}\\n\\t//Close the outer divs\\n\\tProgressBarString += \\\"</div></div>\\\";\\n\\n\\t//This is the part that actually displays the bar in the wiki\\n\\tvar parser = this.wiki.parseText(\\\"text/vnd.tiddlywiki\\\",ProgressBarString,{parseAsInline: false});\\n\\tvar parseTreeNodes = parser ? parser.tree : [];\\n\\tthis.makeChildWidgets(parseTreeNodes);\\n\\n};\\n\\n/*\\nThis makes a value that can be checked against to see if the bar needs to be updates.\\n*/\\nProgressBar.prototype.GetBarState = function () {\\n\\tvar currentSegment = 0;\\n\\tvar Total = 0;\\n\\t//Get the list of filters, if the filters attribute is given it overrides\\n\\t//the finished and unfinished filters if they are given.\\n\\tvar filterList = [];\\n\\tif (this.filters) {\\n\\t\\tfilterList = this.filters.split(\\\",\\\");\\n\\t} else {\\n\\t\\tfilterList = [this.finishedFilter, this.unfinishedFilter];\\n\\t}\\n\\n\\t//this.BarState is used to determine if the bar should be updated or not.\\n\\t//It is a string that will change if the bars apperance should change.\\n\\tthis.BarState = \\\"\\\";\\n\\t//Get the output from each filter\\n\\tfor (var filter in filterList) {\\n\\t\\tcurrentSegment = this.wiki.filterTiddlers(filterList[filter]).length;\\n\\t\\tTotal += currentSegment;\\n\\t\\tif (this.BarState !== \\\"\\\") {\\n\\t\\t\\tthis.BarState += \\\",\\\";\\n\\t\\t}\\n\\t\\tthis.BarState += String(currentSegment);\\n\\t}\\n\\treturn Total;\\n}\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nProgressBar.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\t//This may be able to be more efficient, but I can't think of how at the moment.\\n\\tthis.GetBarState();\\n\\tif(Object.keys(changedAttributes).length || this.OldBarState !== this.BarState) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports[\\\"ProgressBar\\\"] = ProgressBar;\\n\\n})();\\n\",\n            \"title\": \"$:/plugins/OokTech/ProgressBar/ProgressBar.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/plugins/OokTech/BarChart/readme\": {\n            \"title\": \"$:/plugins/OokTech/BarChart/readme\",\n            \"text\": \"This plugin adds the ~ProgressBar widget to ~TiddlyWiki.\\n\\nThis widget can be used to make progress bars to show a percentage finished/unfinished bar, or it can be used to show a stacked bar chart.\\n\\nMultiple widgets can be stacked to make a normal barchart as well, with one widget for each bar displayed.\\n\\nSimple Usage:\\n\\n`<$ProgressBar finished=<<FinishedFilter>> unfinished=<<UnfinishedFilter>>/>`\\n\\nAdvanced Usage:\\n\\n```\\n<$ProgressBar\\n    filters='[[Filter1]],[[Filter2]]'\\n    colors='Color1,Color2'\\n    mode=SomeMode\\n    orientation='horizontal'\\n    class='bar-class'\\n    width=WidthValue\\n    height=HeightValue\\n    unit=WidthHeightUnit\\n/>\\n```\\n\\n|!Parameter |!Description |!Default Value |\\n|!finished |A filter that lists all the things that are finished. If `filters` has a value this is ignored. |`[tag[task]tag[done]]` |\\n|!unfinished |A filter that lists all the things that are not finished. If `filters` has a value this is ignored. |`[tag[task]!tag[done]]` |\\n|!filters |A comma separated list of filters, each filter defines one section of the bar created. If this has a value than `finished` and `unfinished` are ignored. |No Default |\\n|!colors |A comma separated list of css colors that defines the colors for each part of the bar. If there are fewer colors than sections of the bar than the colors loop. |`red, green` |\\n|!mode |This sets if the bar is `stacked` or `sidebyside` |`stacked` |\\n|!orientation |This sets if the bars are `horizontal` or `vertical` |`horizontal` |\\n|!class |An optional css class. |`progress-bar` |\\n|!width |The width of the full chart, used when orientation is `horizontal` |`100` |\\n|!height |The height of the full chart, used when the orientation is `vertical` |`100` |\\n|!unit |The css unit that the width and height are measured in. |`%` |\\n\\n\\nLicense: [[BSD 3 Clause|$:/plugins/OokTech/BarChart/License]]\\n\\nCreator: [[OokTech|$:/plugins/OokTech/OokTechInfo]]\\n\\nSource: [[GitHub|https://https://github.com/OokTech/TW5-BarChart]]\\n\"\n        },\n        \"$:/plugins/OokTech/BarChart/Styles\": {\n            \"title\": \"$:/plugins/OokTech/BarChart/Styles\",\n            \"tags\": \"$:/tags/Stylesheet\",\n            \"text\": \".progress-bar-horizontal {\\n\\n}\\n\\n.progress-bar-horizontal > div > div:first-child {\\n    border-top-left-radius:4px;\\n    border-bottom-left-radius:4px;\\n}\\n\\n.progress-bar-horizontal > div > div:last-child {\\n    border-top-right-radius:4px;\\n    border-bottom-right-radius:4px;\\n}\\n\\n.progress-bar-horizontal > div > div {\\n    display:inline-block;\\n    text-align:center;\\n}\\n\\n.bar-chart-horizontal-left > div:nth-child(1n) {\\n    border-top-right-radius:15%;\\n    border-bottom-right-radius:15%;\\n    display: inline-flex;\\n    align-items: center;\\n}\\n\\n.bar-chart-horizontal-right > div:nth-child(1n) {\\n    border-top-left-radius:15%;\\n    border-bottom-left-radius:15%;\\n    display: inline-flex;\\n    align-items: center;\\n    justify-content: flex-end;\\n}\\n\\n.progress-bar-vertical {\\n\\n}\\n\\n.progress-bar-vertical > div:first-child {\\n    border-top-left-radius:4px;\\n    border-top-right-radius:4px;\\n}\\n\\n.progress-bar-vertical > div:last-child {\\n    border-bottom-left-radius:4px;\\n    border-bottom-right-radius:4px;\\n}\\n\\n.bar-chart {\\n\\n}\\n\\n.bar-chart > div {\\n    display:inline-block;\\n}\\n\\n.bars-right-align {\\n    text-align:right;\\n}\\n\\n.bars-right-align > div > div {\\n    margin-left:auto;\\n    margin-right:0px;\\n}\\n\\n.bars-top-align {\\n    position: relative;\\n    top:0px;\\n    right:0px;\\n}\\n\\n.bars-top-align > div > div {\\n    position: absolute;\\n    top: 0px;\\n    text-align: center;\\n}\\n\\n.bars-bottom-align {\\n    position: relative;\\n    top:0px;\\n    right:0px;\\n}\\n\\n.bars-bottom-align > div > div {\\n    position: absolute;\\n    bottom: 0px;\\n    text-align: center;\\n    vertical-align: bottom;\\n}\\n\"\n        }\n    }\n}","name":"BarChart"}