{"title":"$:/plugins/OokTech/ScatterPlot","description":"A plugin to add simple scatter plots to tiddlywiki","author":"OokTech","version":"0.0.120","core-version":">=5.1.13","source":"","list":"[[$:/plugins/OokTech/ScatterPlot/ReadMe]]","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\n    \"tiddlers\": {\n        \"$:/plugins/OokTech/ScatterPlot/Acknowledgements\": {\n            \"title\": \"$:/plugins/OokTech/ScatterPlot/Acknowledgements\",\n            \"text\": \" This plugin was created and is maintained by [[OokTech|$:/plugins/OokTech/OokTechInfo]].\\n\\n\\n[[Tiddlywiki|http://TiddlyWiki.com]] was originally created by [[Jeremy Ruston|https://github.com/Jermolene/TiddlyWiki5]]. For general ~TiddlyWiki help see [[tiddlywiki.com|http://tiddlywiki.com]] or the [[google group|https://groups.google.com/forum/#!forum/tiddlywiki]].\\n\\nThank you to the general TiddlyWiki community for developing and maintaining the tiddlywiki core.\\n\"\n        },\n        \"$:/plugins/OokTech/ScatterPlot/License\": {\n            \"title\": \"$:/plugins/OokTech/ScatterPlot/License\",\n            \"text\": \"BSD 3-Clause License\\n\\nCopyright (c) 2017, OokTech LLC\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n* Redistributions of source code must retain the above copyright notice, this\\n  list of conditions and the following disclaimer.\\n\\n* Redistributions in binary form must reproduce the above copyright notice,\\n  this list of conditions and the following disclaimer in the documentation\\n  and/or other materials provided with the distribution.\\n\\n* Neither the name of the copyright holder nor the names of its\\n  contributors may be used to endorse or promote products derived from\\n  this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n        },\n        \"$:/plugins/OokTech/OokTechInfo\": {\n            \"title\": \"$:/plugins/OokTech/OokTechInfo\",\n            \"text\": \"~OokTech is a small engineering company based in the USA with an international presence. We work on open software and hardware projects.\\n\\nWebsite: http://Ooktech.com<br>\\n~GitHub: [[OokTech GitHub|https://github.com/OokTech]]\\n\"\n        },\n        \"$:/pluginlibrary/OokTech/OokTechPlugins\": {\n            \"title\": \"$:/pluginlibrary/OokTech/OokTechPlugins\",\n            \"tags\": \"$:/tags/PluginLibrary\",\n            \"url\": \"https://ooktech.com/TiddlyWiki/PluginLibrary\",\n            \"text\": \"The plugin library for plugins developed and maintained by OokTech. See http://OokTech.com/TiddlyWiki for more information.\\n\"\n        },\n        \"$:/plugins/OokTech/ScatterPlot/Scatter Plot Creator\": {\n            \"title\": \"$:/plugins/OokTech/ScatterPlot/Scatter Plot Creator\",\n            \"text\": \"\\\\define thisInnerShowCode() <$~ScatterPlot\\n\\n\\\\define thisShowCode()\\n<pre>\\n<<thisInnerShowCode>>\\n    data=<$text text='\\\"\\\"\\\"'/>{{$:/temp/InteractiveDemo!!data}}<$text text='\\\"\\\"\\\"'/>\\n    mode=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!mode}}<$text text='\\\"'/>\\n    class=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!class}}<$text text='\\\"'/>\\n    width=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!width}}<$text text='\\\"'/>\\n    width-unit=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!width-unit}}<$text text='\\\"'/>\\n    height=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!height}}<$text text='\\\"'/>\\n    height-unit=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!height-unit}}<$text text='\\\"'/>\\n    stroke=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!stroke}}<$text text='\\\"'/>\\n    strokeWidth=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!strokeWidth}}<$text text='\\\"'/>\\n    fill=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!fill}}<$text text='\\\"'/>\\n    symbol=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!symbol}}<$text text='\\\"'/>\\n    radius=<$text text='\\\"'/>{{$:/temp/InteractiveDemo!!radius}}<$text text='\\\"'/>\\n/>\\n</pre>\\n\\\\end\\n\\nThis is both a demo of the sort of charts you can make using this plugin and a tool for creating charts without having to remember the syntax. Just select the options you want below and then copy the code into a tiddler where you want the chart.\\n\\n<$button>\\nLoad Test Data 1 (points)\\n<$action-setfield $tiddler='$:/temp/InteractiveDemo' data=\\\"50,100 10,80 20,40 30,90 40,150 50,200 90,30 60,180 110,30 120,10 150,50 30,170 140,90 150,140\\\"/>\\n</$button>\\n\\n<$button>\\nLoad Test Data 2 (sequence)\\n<$action-setfield $tiddler='$:/temp/InteractiveDemo' data=\\\"50 10 20 90 40 50 90 60 110 120 50 170 90 150\\\"/>\\n</$button>\\n\\n<table style='width:100%'>\\n    <tr>\\n        <th>\\n            data\\n        </th>\\n        <td\\n            colspan=3\\n        >\\n            <$edit-text\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='data'\\n                class='tc-edit-texteditor'\\n            />\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            mode\\n        </th>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='mode'\\n                value='scatter'\\n            >\\n                scatter\\n            </$radio>\\n        </td>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='mode'\\n                value='line'\\n            >\\n                line\\n            </$radio>\\n        </td>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='mode'\\n                value='whisker'\\n            >\\n                whisker\\n            </$radio>\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            width\\n        </th>\\n        <td\\n            colspan=2\\n        >\\n            <$edit-text\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='width'\\n                class='tc-edit-texteditor'\\n            />\\n        </td>\\n        <td>\\n            <$select\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='width-unit'\\n            >\\n                <$list\\n                    filter='% em px ex cm mm in pt pc ch rem vw vh vmin vmax'\\n                >\\n                    <option>\\n                        <<currentTiddler>>\\n                    </option>\\n                </$list>\\n            </$select>\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            height\\n        </th>\\n        <td\\n            colspan=2\\n        >\\n            <$edit-text\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='height'\\n                class='tc-edit-texteditor'\\n            />\\n        </td>\\n        <td>\\n            <$select\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='height-unit'\\n            >\\n                <$list\\n                    filter='% em px ex cm mm in pt pc ch rem vw vh vmin vmax'\\n                >\\n                    <option>\\n                        <<currentTiddler>>\\n                    </option>\\n                </$list>\\n            </$select>\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            class\\n        </th>\\n        <td\\n            colspan=3\\n        >\\n            <$select\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='class'\\n            >\\n                <option\\n                    value=''\\n                >\\n                    //Default//\\n                </option>\\n                <$list\\n                    filter=''\\n                >\\n                    <option>\\n                        <<currentTiddler>>\\n                    </option>\\n                </$list>\\n            </$select>\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            stroke (color)\\n        </th>\\n        <td>\\n            <$edit-text\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='stroke'\\n                class='tc-edit-texteditor'\\n            />\\n        </td>\\n        <th>\\n            strokeWidth\\n        </th>\\n        <td>\\n            <$edit-text\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='strokeWidth'\\n                class='tc-edit-texteditor'\\n            />\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            fill\\n        </th>\\n        <td>\\n            <$edit-text\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='fill'\\n                class='tc-edit-texteditor'\\n            />\\n        </td>\\n        <td>\\n        </td>\\n        <td>\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            symbol\\n        </th>\\n        <td>\\n            <$select\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='symbol'\\n            >\\n                <option\\n                    value=''\\n                >\\n                    //Default//\\n                </option>\\n                <option\\n                    value='o'\\n                >\\n                    o (circle)\\n                </option>\\n                <!--\\n                <option\\n                    value='s'\\n                >\\n                    s (square)\\n                </option>\\n                -->\\n            </$select>\\n        </td>\\n        <th>\\n            radius\\n        </th>\\n        <td>\\n            <$edit-text\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='radius'\\n                class='tc-edit-texteditor'\\n            />\\n        </td>\\n    </tr>\\n    <tr>\\n        <th>\\n            scale\\n        </th>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='scale'\\n                value=none\\n            >\\n                none\\n            </$radio>\\n        </td>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='scale'\\n                value=auto\\n            >\\n                auto\\n            </$radio>\\n        </td>\\n        <td>\\n            <$radio\\n                tiddler='$:/temp/InteractiveDemo'\\n                field='scale'\\n                value=size\\n            >\\n                size\\n            </$radio>\\n        </td>\\n    </tr>\\n</table>\\n\\n<$ScatterPlot\\n    data={{$:/temp/InteractiveDemo!!data}}\\n    mode={{$:/temp/InteractiveDemo!!mode}}\\n    class={{$:/temp/InteractiveDemo!!class}}\\n    width={{$:/temp/InteractiveDemo!!width}}\\n    width-unit={{$:/temp/InteractiveDemo!!width-unit}}\\n    height={{$:/temp/InteractiveDemo!!height}}\\n    height-unit={{$:/temp/InteractiveDemo!!height-unit}}\\n    stroke={{$:/temp/InteractiveDemo!!stroke}}\\n    strokeWidth={{$:/temp/InteractiveDemo!!strokeWidth}}\\n    fill={{$:/temp/InteractiveDemo!!fill}}\\n    symbol={{$:/temp/InteractiveDemo!!symbol}}\\n    radius={{$:/temp/InteractiveDemo!!radius}}\\n    scale={{$:/temp/InteractiveDemo!!scale}}\\n/>\\n\\nCode:\\n\\n<<thisShowCode>>\\n\"\n        },\n        \"$:/plugins/OokTech/ScatterPlot/ScatterPlot.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/OokTech/ScatterPlot/ScatterPlot.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nA widget that creates a scatter plot.\\n\\n\\\\*/\\n\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\nvar widgets;\\nvar container;\\n\\nvar ScatterPlot = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nScatterPlot.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nScatterPlot.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar domNode = this.document.createElement(\\\"div\\\");\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nScatterPlot.prototype.execute = function() {\\n\\t//Get widget attributes.\\n\\tvar width = this.getAttribute(\\\"width\\\", \\\"200\\\");\\n\\tvar widthUnit = this.getAttribute(\\\"width-unit\\\", \\\"px\\\");\\n\\tvar height = this.getAttribute(\\\"height\\\", \\\"200\\\");\\n\\tvar heightUnit = this.getAttribute(\\\"height-unit\\\", \\\"px\\\");\\n\\tvar radius = this.getAttribute(\\\"radius\\\", \\\"3\\\");\\n\\tvar stroke = this.getAttribute(\\\"stroke\\\", \\\"black\\\");\\n\\tvar fill = this.getAttribute(\\\"fill\\\", \\\"yellow\\\");\\n\\tvar strokeWidth = this.getAttribute(\\\"strokeWidth\\\", \\\"1\\\");\\n\\tvar data = this.getAttribute(\\\"data\\\");\\n\\tvar mode = this.getAttribute(\\\"mode\\\", \\\"scatter\\\");\\n\\tvar symbol = this.getAttribute(\\\"symbol\\\", \\\"o\\\");\\n\\tvar scale = this.getAttribute(\\\"scale\\\", 'false');\\n\\n\\t//Get the data points\\n\\t//Data can be one or two dimensional\\n\\t//One dimensional data is given by a list of comma separated values\\n\\t//Data can take a string of x-y values in the form x1,y1;x2,y2;\\n\\n\\tvar ScatterPlotString = \\\"<svg style='border:solid 1px' width=\\\" + width + widthUnit + \\\" height=\\\" + height + heightUnit + \\\">\\\";\\n\\n\\tif (data) {\\n\\t\\t//Figure out if it is one or two dimensional data\\n\\t\\tvar twoDimensions = true;\\n\\t\\tif (data.indexOf(',') === -1 || data.indexOf(' ') === -1) {\\n\\t\\t\\tvar twoDimensions = false;\\n\\t\\t}\\n\\n\\t\\t//Get the values for each point\\n\\t\\tvar points = data.split(' ');\\n\\t\\tconsole.log(points)\\n\\t\\t//determine spacing for sequential data\\n\\t\\tvar valueWidth = width/(points.length-1);\\n\\n\\t\\tvar coordinates = [];\\n\\t\\tvar value;\\n\\t\\tvar max = [0,0];\\n\\t\\tvar min = [99999,99999];\\n\\t\\tfor (var i = 0; i < points.length; i++) {\\n\\t\\t\\tif (twoDimensions) {\\n\\t\\t\\t\\tvalue = points[i].split(',');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvalue = [i*valueWidth,points[i]];\\n\\t\\t\\t}\\n\\t\\t\\t//Keep track of the max and min values\\n\\t\\t\\tif (Number(value[0]) > max[0]) {\\n\\t\\t\\t\\tmax[0] = value[0];\\n\\t\\t\\t}\\n\\t\\t\\tif (Number(value[1]) > max[1]) {\\n\\t\\t\\t\\tmax[1] = value[1];\\n\\t\\t\\t}\\n\\t\\t\\tif (Number(value[0]) < min[0]) {\\n\\t\\t\\t\\tmin[0] = value[0];\\n\\t\\t\\t}\\n\\t\\t\\tif (Number(value[1]) < min[1]) {\\n\\t\\t\\t\\tmin[1] = value[1];\\n\\t\\t\\t}\\n\\n\\t\\t\\tcoordinates.push(value);\\n\\t\\t}\\n\\n\\t\\tvar outputs = [];\\n\\t\\tfor (var i = 0; i < coordinates.length; i++) {\\n\\t\\t\\tif (scale === 'auto') {\\n\\t\\t\\t\\tvar xScale = 0.9*width/(max[0]-min[0]);\\n\\t\\t\\t\\tvar yScale = 0.9*height/(max[1]-min[1]);\\n\\t\\t\\t\\toutputs.push([xScale*(coordinates[i][0]-min[0]),height-yScale*(coordinates[i][1]-min[1])]);\\n\\t\\t\\t} else if (scale === 'size') {\\n\\t\\t\\t\\tvar xScale = width/(max[0]-min[0]);\\n\\t\\t\\t\\tvar yScale = height/(max[1]-min[1]);\\n\\t\\t\\t\\toutputs.push([xScale*(coordinates[i][0]-min[0]),height-yScale*(coordinates[i][1]-min[1])]);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\toutputs.push([coordinates[i][0],height-coordinates[i][1]]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (var i = 0; i < outputs.length; i++) {\\n\\t\\t\\t//Add the point\\n\\t\\t\\tScatterPlotString += \\\"<circle cx=\\\" + outputs[i][0] + \\\" cy=\\\" + outputs[i][1] + \\\" r=\\\" + radius + \\\" stroke=\\\" + stroke + \\\" fill=\\\" + fill + \\\" stroke-width=\\\" + strokeWidth + \\\"/>\\\";\\n\\t\\t\\t//If the points are connected using lines, add the lines.\\n\\t\\t\\tif (mode === 'line') {\\n\\t\\t\\t\\tif (i > 0) {\\n\\t\\t\\t\\t\\tScatterPlotString += \\\"<line x1=\\\" + oldValue[0] + \\\" y1=\\\" + oldValue[1] + \\\" x2=\\\" + outputs[i][0] + \\\" y2=\\\" + outputs[i][1] + \\\" stroke-width=1 stroke=black/>\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar oldValue = outputs[i];\\n\\t\\t\\t}\\n\\t\\t\\tif (mode === 'whisker') {\\n\\t\\t\\t\\tScatterPlotString += \\\"<line x1=\\\" + outputs[i][0] + \\\" y1=\\\" + height + \\\" x2=\\\" + outputs[i][0] + \\\" y2=\\\" + outputs[i][1] + \\\" stroke-width=1 stroke=black/>\\\";\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t//Close the outer divs\\n\\tScatterPlotString += \\\"</svg>\\\";\\n\\t/*\\n\\tScatterPlotString += \\\"<div style='width:\\\" + width + \\\"px;position:relative;'><div style='text-align:left;'>\\\" + min[0] + \\\"</div><div style='width:100%;text-align:right;position:absolute;top:0px;'>\\\" + max[0] + \\\"</div></div>\\\"\\n\\t*/\\n\\n\\t//This is the part that actually displays the bar in the wiki\\n\\tvar parser = this.wiki.parseText(\\\"text/vnd.tiddlywiki\\\",ScatterPlotString,{parseAsInline: false});\\n\\tvar parseTreeNodes = parser ? parser.tree : [];\\n\\tthis.makeChildWidgets(parseTreeNodes);\\n\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nScatterPlot.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(Object.keys(changedAttributes).length) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports[\\\"ScatterPlot\\\"] = ScatterPlot;\\n\\n})();\\n\",\n            \"title\": \"$:/plugins/OokTech/ScatterPlot/ScatterPlot.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/plugins/OokTech/ScatterPlot/readme\": {\n            \"title\": \"$:/plugins/OokTech/ScatterPlot/readme\",\n            \"text\": \"This plugin adds the ~ScatterPlot widget to ~TiddlyWiki.\\n\\nTo make scatter plots use the `$ScatterPlot` widget. There is also the [[scatter plot creator|$:/plugins/OokTech/ScatterPlot/Scatter Plot Creator]] to help simplying the creation process. The only required input is the data set to use. The data should be in the form of a space separated list of values. The easiest ways to do this are to either directly give the values like `<$ScatterPlot data='1 2 3 4'/>` or to transclude a field that has the values like `<$ScatterPlot data={{SomeTiddler!!values}}/>` where the values are stored in the `values` field of ~SomeTiddler.\\n\\nThe data can either be a sequenece of values like `1 9 4 4 5` or it can be a sequence of x,y pairs like `40,50 20,20 90,140`. I am working on adding other ways to give values.\\n\\nWhen the data is given as a sequence the horizontal spacing is automatically set so that the data takes up the entire width. When it is given as `x,y` pairs the data is plotted using the x and y coordinates in `px` units.\\n\\n|!Parameter |!Description |!Default |\\n|!''data'' |The data to be plotted. It should either be a sequence of values of a sequence of x,y points. | No default |\\n|!width |The width of the generated plot in pixels (`px`) |`200` |\\n|!height |The height of the generated plot in pixels (`px`) |`200` |\\n|!mode |The type of plot generated, options are `scatter`, `line` and `whisker` |`scatter` |\\n|!symbol |The symbol to use, currenly only circle (`o`) is supported. |`o` |\\n|!radius |The radius of the circles used to mark each point. |`3` |\\n|!storke |The color of the stroke part of the generate symbols. |`black` |\\n|!fill |The color of the fill patr of the generated symbols. |`yellow` |\\n|!strokeWidth |The width of the stroke part of the generated symbols. |`1` |\\n|!scale |If the plot is scaled or not. Options are `none`, `auto` or `size` |`none` |\\n|!widthUnit* |The unit for the width parameter (see note below) |`px` |\\n|!heightUnit* |The unit for the height parameter (see note below) |`px` |\\n\\n!!!Scaling\\n\\nThe option `size` scales the data so that it fills the entire space, that is the maximum y value of the input is mapped to the top of the plot and the minimum y value is mapped to the bottom, with minimum x on the left and maximum x on the right.\\n\\nThe option `auto` is like `size`, but there is a small amonut of extra space on the top and on the right side past the maximum input data values. This can make some types of plots look much nicer.\\n\\n*''Note'' - The widthUnit and heightUnit parameters work, but due to the coordinate system used by the plotted points the points locations are always determined using `px`, so the plot will not resize based on the width and height correctly unless they are given in `px`.\\n\\n\\nLicense: [[BSD 3 Clause|$:/plugins/OokTech/ScatterPlot/License]]\\n\\nCreator: [[OokTech|$:/plugins/OokTech/OokTechInfo]]\\n\\nSource: [[GitHub|https://https://github.com/OokTech/TW5-ScatterPlot]]\\n\"\n        }\n    }\n}","name":"ScatterPlot"}