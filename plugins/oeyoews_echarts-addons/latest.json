{"version":"0.0.1","type":"application/json","title":"$:/plugins/oeyoews/echarts-addons","plugin-type":"plugin","name":"Echarts Addons","description":"Addons","author":"oeyoews","parent-plugin":"$:/plugins/Gk0Wk/echarts","list":"readme","dependents":"","text":"{\"tiddlers\":{\"$:/plugins/oeyoews/echarts-addons/readme\":{\"title\":\"$:/plugins/oeyoews/echarts-addons/readme\",\"text\":\"目前有 clockc, tagpie, sevenday, 三种addon\\n\\n* 将echarts的addons独立出来, 使用js编写,不依赖外部环境, 即使在tw里面也能快速修改, 方便用户修改\\n\\n## Usage\\n\\n> coming ...\\n\\n## TODO\\n\\n* update tooltip style to fix darkmode\"},\"addon/clock.js\":{\"title\":\"addon/clock.js\",\"text\":\"/*\\\\\\r\\ntitle: addon/clock.js\\r\\nmodule-type: echarts-component\\r\\ntype: application/javascript\\r\\ndescription: clock with echarts\\r\\n\\\\*/\\r\\n\\r\\nconst Clock = {\\r\\n  onUpdate(myChart) {\\r\\n    option = {\\r\\n      title: {\\r\\n        text: '',\\r\\n        top: 'top',\\r\\n        left: 'center',\\r\\n      },\\r\\n      series: [\\r\\n        {\\r\\n          name: 'hour',\\r\\n          type: 'gauge',\\r\\n          startAngle: 90,\\r\\n          endAngle: -270,\\r\\n          min: 0,\\r\\n          max: 12,\\r\\n          splitNumber: 12,\\r\\n          clockwise: true,\\r\\n          axisLine: {\\r\\n            lineStyle: {\\r\\n              width: 8,\\r\\n              color: [[1, 'rgba(0,0,0,0.7)']],\\r\\n              shadowColor: 'rgba(0, 0, 0, 0.5)',\\r\\n              shadowBlur: 15,\\r\\n            },\\r\\n          },\\r\\n          splitLine: {\\r\\n            lineStyle: {\\r\\n              shadowColor: 'rgba(0, 0, 0, 0.3)',\\r\\n              shadowBlur: 3,\\r\\n              shadowOffsetX: 1,\\r\\n              shadowOffsetY: 2,\\r\\n            },\\r\\n          },\\r\\n          axisLabel: {\\r\\n            fontSize: 16,\\r\\n            distance: 15,\\r\\n            formatter: function (value) {\\r\\n              if (value === 0) {\\r\\n                return '';\\r\\n              }\\r\\n              return value + '';\\r\\n            },\\r\\n          },\\r\\n          pointer: {\\r\\n            icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\\r\\n            width: 6,\\r\\n            length: '55%',\\r\\n            offsetCenter: [0, '8%'],\\r\\n            itemStyle: {\\r\\n              color: '#C0911F',\\r\\n              shadowColor: 'rgba(0, 0, 0, 0.3)',\\r\\n              shadowBlur: 8,\\r\\n              shadowOffsetX: 2,\\r\\n              shadowOffsetY: 4,\\r\\n            },\\r\\n          },\\r\\n          detail: {\\r\\n            show: false,\\r\\n          },\\r\\n          title: {\\r\\n            offsetCenter: [0, '30%'],\\r\\n          },\\r\\n          data: [\\r\\n            {\\r\\n              value: 0,\\r\\n            },\\r\\n          ],\\r\\n        },\\r\\n        {\\r\\n          name: 'minute',\\r\\n          type: 'gauge',\\r\\n          startAngle: 90,\\r\\n          endAngle: -270,\\r\\n          min: 0,\\r\\n          max: 60,\\r\\n          clockwise: true,\\r\\n          axisLine: {\\r\\n            show: false,\\r\\n          },\\r\\n          splitLine: {\\r\\n            show: false,\\r\\n          },\\r\\n          axisTick: {\\r\\n            show: false,\\r\\n          },\\r\\n          axisLabel: {\\r\\n            show: false,\\r\\n          },\\r\\n          pointer: {\\r\\n            icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\\r\\n            width: 4,\\r\\n            length: '70%',\\r\\n            offsetCenter: [0, '8%'],\\r\\n            itemStyle: {\\r\\n              color: '#C0911F',\\r\\n              shadowColor: 'rgba(0, 0, 0, 0.3)',\\r\\n              shadowBlur: 8,\\r\\n              shadowOffsetX: 2,\\r\\n              shadowOffsetY: 4,\\r\\n            },\\r\\n          },\\r\\n          anchor: {\\r\\n            show: true,\\r\\n            size: 20,\\r\\n            showAbove: false,\\r\\n            itemStyle: {\\r\\n              borderWidth: 8,\\r\\n              borderColor: '#C0911F',\\r\\n              shadowColor: 'rgba(0, 0, 0, 0.3)',\\r\\n              shadowBlur: 8,\\r\\n              shadowOffsetX: 2,\\r\\n              shadowOffsetY: 4,\\r\\n            },\\r\\n          },\\r\\n          detail: {\\r\\n            show: false,\\r\\n          },\\r\\n          title: {\\r\\n            offsetCenter: ['0%', '-40%'],\\r\\n          },\\r\\n          data: [\\r\\n            {\\r\\n              value: 0,\\r\\n            },\\r\\n          ],\\r\\n        },\\r\\n        {\\r\\n          name: 'second',\\r\\n          type: 'gauge',\\r\\n          startAngle: 90,\\r\\n          endAngle: -270,\\r\\n          min: 0,\\r\\n          max: 60,\\r\\n          animationEasingUpdate: 'bounceOut',\\r\\n          clockwise: true,\\r\\n          axisLine: {\\r\\n            show: false,\\r\\n          },\\r\\n          splitLine: {\\r\\n            show: false,\\r\\n          },\\r\\n          axisTick: {\\r\\n            show: false,\\r\\n          },\\r\\n          axisLabel: {\\r\\n            show: false,\\r\\n          },\\r\\n          pointer: {\\r\\n            icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\\r\\n            width: 2,\\r\\n            length: '85%',\\r\\n            offsetCenter: [0, '8%'],\\r\\n            itemStyle: {\\r\\n              color: '#C0911F',\\r\\n              shadowColor: 'rgba(0, 0, 0, 0.3)',\\r\\n              shadowBlur: 8,\\r\\n              shadowOffsetX: 2,\\r\\n              shadowOffsetY: 4,\\r\\n            },\\r\\n          },\\r\\n          anchor: {\\r\\n            show: true,\\r\\n            size: 15,\\r\\n            showAbove: true,\\r\\n            itemStyle: {\\r\\n              color: '#C0911F',\\r\\n              shadowColor: 'rgba(0, 0, 0, 0.3)',\\r\\n              shadowBlur: 8,\\r\\n              shadowOffsetX: 2,\\r\\n              shadowOffsetY: 4,\\r\\n            },\\r\\n          },\\r\\n          detail: {\\r\\n            show: false,\\r\\n          },\\r\\n          title: {\\r\\n            offsetCenter: ['0%', '-40%'],\\r\\n          },\\r\\n          data: [\\r\\n            {\\r\\n              value: 0,\\r\\n            },\\r\\n          ],\\r\\n        },\\r\\n      ],\\r\\n    };\\r\\n    setInterval(function () {\\r\\n      var date = new Date();\\r\\n      var second = date.getSeconds();\\r\\n      var minute = date.getMinutes() + second / 60;\\r\\n      var hour = (date.getHours() % 12) + minute / 60;\\r\\n      option.animationDurationUpdate = 300;\\r\\n      myChart.setOption({\\r\\n        series: [\\r\\n          {\\r\\n            name: 'hour',\\r\\n            animation: hour !== 0,\\r\\n            data: [{ value: hour }],\\r\\n          },\\r\\n          {\\r\\n            name: 'minute',\\r\\n            animation: minute !== 0,\\r\\n            data: [{ value: minute }],\\r\\n          },\\r\\n          {\\r\\n            animation: second !== 0,\\r\\n            name: 'second',\\r\\n            data: [{ value: second }],\\r\\n          },\\r\\n        ],\\r\\n      });\\r\\n    }, 1000);\\r\\n\\r\\n    myChart.setOption(option);\\r\\n  },\\r\\n\\r\\n  shouldUpdate() {\\r\\n    return false;\\r\\n  },\\r\\n};\\r\\n\\r\\nmodule.exports = Clock;\\r\\n\",\"module-type\":\"echarts-component\",\"type\":\"application/javascript\",\"description\":\"clock with echarts\"},\"addon/sevenday.js\":{\"title\":\"addon/sevenday.js\",\"text\":\"/*\\\\\\r\\ntitle: addon/sevenday.js\\r\\nmodule-type: echarts-component\\r\\ntype: application/javascript\\r\\ndescription: seven\\r\\n\\\\*/\\r\\n\\r\\n// TODO: 简化时间的处理\\r\\n// TODO: 指定线的颜色, 区域的颜色\\r\\n// @description: echarts 几乎支持每一处的样式设置, 这里仅根据需要设置必要的样式\\r\\nconst getData = (date, type = 'created') =>\\r\\n  $tw.wiki.filterTiddlers(`[sameday:${type}[${date}]!is[system]!has[draft.of]]`)\\r\\n    .length;\\r\\n\\r\\nfunction parsesixDate(dateString) {\\r\\n  const year = parseInt(dateString.substr(0, 4));\\r\\n  const month = parseInt(dateString.substr(4, 2)) - 1; // 月份从0开始，需要减1\\r\\n  const day = parseInt(dateString.substr(6, 2));\\r\\n  const realDate = new Date(year, month, day);\\r\\n  //.toLocaleDateString();\\r\\n  return realDate;\\r\\n}\\r\\n\\r\\nfunction getSevenDaysBefore(dateString, daysLength = 7) {\\r\\n  const currentDate = dateString ? parsesixDate(dateString) : new Date();\\r\\n\\r\\n  const sevenDays = [];\\r\\n\\r\\n  for (let i = 0; i < daysLength; i++) {\\r\\n    // 获取当前日期的年、月、日\\r\\n    const year = currentDate.getFullYear();\\r\\n    const month = currentDate.getMonth() + 1; // 月份从0开始，需要加1\\r\\n    const day = currentDate.getDate();\\r\\n\\r\\n    // 将年、月、日格式化成字符串，并添加到数组\\r\\n    const dateString = `${year}${month < 10 ? '0' : ''}${month}${\\r\\n      day < 10 ? '0' : ''\\r\\n    }${day}`;\\r\\n    sevenDays.unshift(dateString); // 使用unshift方法将日期添加到数组头部\\r\\n\\r\\n    // 将当前日期减一天，以便生成前一天的日期\\r\\n    currentDate.setDate(currentDate.getDate() - 1);\\r\\n  }\\r\\n\\r\\n  return sevenDays;\\r\\n}\\r\\n\\r\\nconst Sevendays = {\\r\\n  onUpdate(myChart, _state, addonAttributes) {\\r\\n    /**\\r\\n     * @param days 指定天数\\r\\n     * @param date 指定日期\\r\\n     * @param title 标题\\r\\n     * @param subtitle 副标题\\r\\n     */\\r\\n    const {\\r\\n      days,\\r\\n      date,\\r\\n      title: text = '最近文章动态',\\r\\n      subtitle: subtext = '',\\r\\n      disableClick = 'no',\\r\\n      // smooth = 'true',\\r\\n    } = addonAttributes;\\r\\n\\r\\n    const sevendays = getSevenDaysBefore(date, days);\\r\\n\\r\\n    // TODO: 封装成函数 https://echarts.apache.org/examples/en/editor.html?c=bump-chart\\r\\n    const createdData = [];\\r\\n    const modifiedData = [];\\r\\n\\r\\n    sevendays.forEach((date) => createdData.push(getData(date)));\\r\\n    sevendays.forEach((date) => modifiedData.push(getData(date, 'modified')));\\r\\n\\r\\n    const option = {\\r\\n      title: {\\r\\n        text,\\r\\n        subtext,\\r\\n        left: 'center',\\r\\n        top: 'bottom',\\r\\n      },\\r\\n      legend: {\\r\\n        data: ['created', 'modified'],\\r\\n      },\\r\\n      toolbox: {\\r\\n        feature: {\\r\\n          restore: {},\\r\\n        },\\r\\n      },\\r\\n      tooltip: {\\r\\n        trigger: 'item', // item\\r\\n        formatter: function (params) {\\r\\n          const { name: date, value: count, seriesName } = params;\\r\\n          const realDate = parsesixDate(date).toLocaleDateString();\\r\\n          if (seriesName === 'created') {\\r\\n            return count\\r\\n              ? `${realDate} 新增了 ${count} 篇文章`\\r\\n              : `${realDate} 没有新增文章`;\\r\\n          } else {\\r\\n            return count\\r\\n              ? `${realDate} 更新了 ${count} 篇文章`\\r\\n              : `${realDate} 没有文章更新`;\\r\\n          }\\r\\n        },\\r\\n      },\\r\\n      // color: [''],\\r\\n      xAxis: {\\r\\n        boundaryGap: true, // option\\r\\n        type: 'category',\\r\\n        data: sevendays,\\r\\n        name: '日期',\\r\\n      },\\r\\n      yAxis: {\\r\\n        type: 'value',\\r\\n        name: '文章数量',\\r\\n      },\\r\\n      animationDuration: 2000,\\r\\n      series: [\\r\\n        {\\r\\n          name: 'created',\\r\\n          data: createdData,\\r\\n          showSymbol: true,\\r\\n          type: 'line',\\r\\n          symbolSize: 10,\\r\\n          endLabel: {\\r\\n            show: true,\\r\\n            formatter: '{a}',\\r\\n            distance: 20,\\r\\n          },\\r\\n          // areaStyle: {\\r\\n          // normal: {\\r\\n          //   color: \\\"green\\\", //改变区域颜色\\r\\n          //   lineStyle: {\\r\\n          //     color: \\\"green\\\", //改变折线颜色\\r\\n          //   },\\r\\n          // },\\r\\n          // },\\r\\n          lineStyle: {\\r\\n            width: 4,\\r\\n            // color: 'purple'\\r\\n          },\\r\\n          emphasis: {\\r\\n            focus: 'series',\\r\\n            itemStyle: {\\r\\n              scale: 1.5,\\r\\n              shadowOffsetX: 0,\\r\\n              shadowColor: 'rgba(0, 0, 0, 0.5)',\\r\\n            },\\r\\n          },\\r\\n          smooth: true,\\r\\n        },\\r\\n        {\\r\\n          name: 'modified',\\r\\n          data: modifiedData,\\r\\n          lineStyle: {\\r\\n            width: 4,\\r\\n          },\\r\\n          symbolSize: 10,\\r\\n          type: 'line',\\r\\n          showSymbol: true,\\r\\n          endLabel: {\\r\\n            show: true,\\r\\n            formatter: '{a}',\\r\\n            distance: 20,\\r\\n          },\\r\\n          // areaStyle: {},\\r\\n          emphasis: {\\r\\n            focus: 'series',\\r\\n            itemStyle: {\\r\\n              // color: '',\\r\\n              scale: 1.25,\\r\\n              shadowOffsetX: 0,\\r\\n              shadowColor: 'rgba(0, 0, 0, 0.5)',\\r\\n            },\\r\\n          },\\r\\n          smooth: true,\\r\\n        },\\r\\n      ],\\r\\n    };\\r\\n\\r\\n    myChart.setOption(option);\\r\\n    myChart.on('dblclick', 'series', function (params) {\\r\\n      const { name: date, value: count, seriesName } = params;\\r\\n      const goto = new $tw.Story();\\r\\n      const filter = `[sameday:${seriesName}[${date}]!is[system]!has[draft.of]]`;\\r\\n\\r\\n      if (!count) return;\\r\\n      $tw.rootWidget.invokeActionString(\\r\\n        '<$action-setfield $tiddler=\\\"$:/temp/advancedsearch\\\" text=\\\"\\\"\\\"' +\\r\\n          filter +\\r\\n          '\\\"\\\"\\\"/><$action-setfield $tiddler=\\\"$:/temp/advancedsearch/input\\\" text=\\\"\\\"\\\"' +\\r\\n          filter +\\r\\n          '\\\"\\\"\\\"/><$action-setfield $tiddler=\\\"$:/temp/advancedsearch/refresh\\\" text=\\\"yes\\\"/><$action-setfield $tiddler=\\\"$:/state/tab--1498284803\\\" text=\\\"$:/core/ui/AdvancedSearch/Filter\\\"/>',\\r\\n      );\\r\\n      goto.navigateTiddler('$:/AdvancedSearch');\\r\\n    });\\r\\n  },\\r\\n  shouldUpdate() {\\r\\n    return false;\\r\\n  },\\r\\n};\\r\\n\\r\\nmodule.exports = Sevendays;\\r\\n\",\"module-type\":\"echarts-component\",\"type\":\"application/javascript\",\"description\":\"seven\"},\"addon/tagpie.js\":{\"title\":\"addon/tagpie.js\",\"text\":\"/*\\\\\\r\\ntitle: addon/tagpie.js\\r\\nmodule-type: echarts-component\\r\\ntype: application/javascript\\r\\ndescription: tag pie on tiddlywiki\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nconst getData = (tag) => {\\r\\n  return {\\r\\n    name: tag,\\r\\n    value: $tw.wiki.filterTiddlers(`[tag[${tag}]!has[draft.of]]`).length,\\r\\n  };\\r\\n};\\r\\n\\r\\nconst goto = new $tw.Story();\\r\\n\\r\\nconst gotoTagTiddler = (params) => {\\r\\n  const title = params.name;\\r\\n  const existTiddler = $tw.wiki.tiddlerExists(title);\\r\\n  if (!existTiddler) {\\r\\n    console.log(title + ' not found');\\r\\n    return;\\r\\n  }\\r\\n  // parentWidget.dispatchEvent( { type: 'tm-navigate', navigateTo: title } )\\r\\n  goto.navigateTiddler(title);\\r\\n};\\r\\n\\r\\nconst TagPie = {\\r\\n  onUpdate(myChart, _, addonAttributes) {\\r\\n    /*\\r\\n     * @description 理论上所有的option配置都可以暴露出来, 这里仅仅暴露一些常用的配置, echarts将这些工作交给了addon, 大概是不同类型的addon处理起来比较复杂,但是与此同时,addon就更具有扩展性\\r\\n     * @param filter 默认是用户的所有tiddler, 但是你也可以使用 filter='[tag[Journal]]' 列出所有的 Journal tiddler\\r\\n     * @param title\\r\\n     * @param radius\\r\\n     * @param sort {descend|ascend}\\r\\n     * @param doughnut {'yes'}\\r\\n     * @param width {0}\\r\\n     * @param legend {'yes'}\\r\\n     * @param toolbox {'show'|'hide'}\\r\\n     */\\r\\n    const {\\r\\n      title: text,\\r\\n      filter = '[tags[]!prefix[$:/]]',\\r\\n      sort = 'descend',\\r\\n      width = 2,\\r\\n      radius = 10,\\r\\n      toolbox = 'hide',\\r\\n      doughnut,\\r\\n      focusSelf,\\r\\n      legend,\\r\\n    } = addonAttributes;\\r\\n    // NOTE: data必须在执行onUpdate函数的时候获取到最新数据,不要写在onUpdate函数外面\\r\\n    const data = [];\\r\\n\\r\\n    // alpha sort default\\r\\n    // 超过50不显示\\r\\n    const tags = $tw.wiki.filterTiddlers(filter).slice(0, 50).sort();\\r\\n    tags.forEach((tag) => data.push(getData(tag)));\\r\\n\\r\\n    const borderWidth = data.length > 10 ? 0 : width;\\r\\n    const borderRadius = data.length > 10 ? 5 : radius;\\r\\n\\r\\n    // 如果类型过多, width 自动设置为0, 此时无视用户的width配置\\r\\n    // 配置具体参考echarts官方文档\\r\\n    const option = {\\r\\n      title: {\\r\\n        text,\\r\\n        subtext: '',\\r\\n        left: 'left',\\r\\n        top: 'top',\\r\\n      },\\r\\n      toolbox: {\\r\\n        show: toolbox === 'show' ? true : false,\\r\\n        left: 0,\\r\\n        bottom: 0,\\r\\n        feature: {\\r\\n          dataView: { show: true, readOnly: false },\\r\\n          restore: {},\\r\\n          saveAsImage: {},\\r\\n        },\\r\\n      },\\r\\n      tooltip: {\\r\\n        trigger: 'item',\\r\\n        formatter: function (params) {\\r\\n          const { name, value, percent } = params;\\r\\n          if (value) {\\r\\n            return `${name} 标签 有 ${value} 个条目 (${percent}%)`;\\r\\n          } else {\\r\\n            return `${name} 条目`;\\r\\n          }\\r\\n        },\\r\\n      },\\r\\n      legend: {\\r\\n        show: legend === 'yes' ? true : false,\\r\\n        orient: 'vertical',\\r\\n        right: 10,\\r\\n        top: 20,\\r\\n        bottom: 20,\\r\\n        type: 'scroll',\\r\\n      },\\r\\n      series: [\\r\\n        {\\r\\n          name: 'Tag',\\r\\n          type: 'pie',\\r\\n          radius: doughnut === 'yes' ? ['40%', '70%'] : '50%',\\r\\n          center: legend === 'yes' ? ['40%', '50%'] : '50%',\\r\\n          data,\\r\\n          itemStyle: {\\r\\n            borderRadius,\\r\\n            borderWidth,\\r\\n            borderColor: '#fff',\\r\\n          },\\r\\n          emphasis: {\\r\\n            focus: focusSelf === 'yes' ? 'self' : '',\\r\\n            itemStyle: {},\\r\\n          },\\r\\n        },\\r\\n      ],\\r\\n    };\\r\\n\\r\\n    // descend or ascend sort\\r\\n    data.sort(function (a, b) {\\r\\n      return sort === 'descend' ? b.value - a.value : a.value - b.value;\\r\\n    });\\r\\n\\r\\n    myChart.setOption(option);\\r\\n    myChart.on('click', 'series', gotoTagTiddler);\\r\\n    // 如何在这里监听change 事件, 从而实现自动刷新主题\\r\\n  },\\r\\n\\r\\n  // TODO: need refresh manually here\\r\\n  shouldUpdate(_, changedTiddlers) {\\r\\n    // tw里面即使是一个state tiddler变换都会触发这个函数的调用\\r\\n    // changeTiddlers 会包含一些系统tiddler的状态变换tiddler, 应该去掉\\r\\n    // log 输出不了, 但是alert却可以\\r\\n    const filteredChangedTiddlers = Object.keys(changedTiddlers).filter(\\r\\n      (tiddler) =>\\r\\n        tiddler === '$:/info/darkmode' ||\\r\\n        (!tiddler.startsWith('$:/') && !tiddler.startsWith('Draft of')),\\r\\n    );\\r\\n    // TODO\\r\\n    return filteredChangedTiddlers.length ? true : false;\\r\\n    // return true;\\r\\n  },\\r\\n};\\r\\n\\r\\n// default export\\r\\nmodule.exports = TagPie;\\r\\n\",\"module-type\":\"echarts-component\",\"type\":\"application/javascript\",\"description\":\"tag pie on tiddlywiki\"}}}"}