{"title":"$:/plugins/OokTech/RandomValue","description":"A random number generator for TW5","author":"OokTech","version":"0.1.5","core-version":">=5.0.8","source":"https://github.com/OokTech/TW5-RandomValue","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\n    \"tiddlers\": {\n        \"$:/plugins/OokTech/RandomValue/Acknowledgements\": {\n            \"title\": \"$:/plugins/OokTech/RandomValue/Acknowledgements\",\n            \"text\": \" This plugin was created and is maintained by [[OokTech|$:/plugins/OokTech/OokTechInfo]].\\n\\n\\n[[Tiddlywiki|http://TiddlyWiki.com]] was originally created by [[Jeremy Ruston|https://github.com/Jermolene/TiddlyWiki5]]. For general ~TiddlyWiki help see [[tiddlywiki.com|http://tiddlywiki.com]] or the [[google group|https://groups.google.com/forum/#!forum/tiddlywiki]].\\n\\nThank you to the general TiddlyWiki community for developing and maintaining the tiddlywiki core.\\n\"\n        },\n        \"$:/plugins/OokTech/RandomValue/License\": {\n            \"title\": \"$:/plugins/OokTech/RandomValue/License\",\n            \"text\": \"BSD 3-Clause License\\n\\nCopyright (c) 2017, OokTech LLC\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n* Redistributions of source code must retain the above copyright notice, this\\n  list of conditions and the following disclaimer.\\n\\n* Redistributions in binary form must reproduce the above copyright notice,\\n  this list of conditions and the following disclaimer in the documentation\\n  and/or other materials provided with the distribution.\\n\\n* Neither the name of the copyright holder nor the names of its\\n  contributors may be used to endorse or promote products derived from\\n  this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n        },\n        \"$:/plugins/OokTech/OokTechInfo\": {\n            \"title\": \"$:/plugins/OokTech/OokTechInfo\",\n            \"text\": \"~OokTech is a small engineering company based in the USA with an international presence. We work on open software and hardware projects.\\n\\nWebsite: http://Ooktech.com<br>\\n~GitHub: [[OokTech GitHub|https://github.com/OokTech]]\\n\"\n        },\n        \"$:/pluginlibrary/OokTech/OokTechPlugins\": {\n            \"title\": \"$:/pluginlibrary/OokTech/OokTechPlugins\",\n            \"tags\": \"$:/tags/PluginLibrary\",\n            \"url\": \"https://ooktech.com/TiddlyWiki/PluginLibrary\",\n            \"text\": \"The plugin library for plugins developed and maintained by OokTech. See http://OokTech.com/TiddlyWiki for more information.\\n\"\n        },\n        \"$:/plugins/OokTech/RandomValue/action-randval.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/OokTech/RandomValue/action-randval.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to set a single field or index on a tiddler to a random number.\\n\\n<$action-randval $tiddler=someTiddler $field=store_field $lower=1 $upper=6 $step=1/>\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar RandValWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nRandValWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nRandValWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nRandValWidget.prototype.execute = function() {\\n\\tthis.actionTiddler = this.getAttribute(\\\"$tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.actionField = this.getAttribute(\\\"$field\\\",\\\"store_field\\\");\\n\\tthis.actionIndex = this.getAttribute(\\\"$index\\\");\\n\\tthis.padLength = this.getAttribute(\\\"$length\\\",\\\"0\\\");\\n\\tthis.prefixValue = this.getAttribute(\\\"$prefix\\\")\\n\\n\\tvar numrolls = this.getAttribute(\\\"$numrolls\\\",1);\\n\\tvar lower = this.getAttribute(\\\"$lower\\\",1);\\n\\tvar upper = this.getAttribute(\\\"$upper\\\",6);\\n\\tvar step = this.getAttribute(\\\"$step\\\",1);\\n\\tvar randValue;\\n\\tvar output;\\n\\n\\tif(numrolls===0) {\\n\\t\\trandValue = 0;\\n\\t} else {\\n\\t\\tvar numpts = ((upper)-(lower))/(step)+1;\\n\\t\\tvar size = (upper)-(lower);\\n\\t\\tif(numpts <= 1) {\\n\\t\\t  randValue = Number(numrolls*lower);\\n\\t\\t} else {\\n\\t\\t\\tvar randValue = 0;\\n\\t\\t\\tfor (var i = 0; i < Number(numrolls); i++) {\\n\\t\\t\\t  randValue = Number(randValue) + (Math.floor(Math.random()*numpts)*(step)+Number(lower));\\n\\t\\t\\t}\\n\\t\\t  if(Number(randValue) > Number(numrolls)*Number(upper)) {\\n\\t\\t    randValue = Number(numrolls*upper);\\n\\t\\t  }\\n\\t\\t}\\n\\t}\\n\\n\\tif(this.prefixValue) {\\n\\t\\tif(this.padLength) {\\n\\t\\t\\toutput = this.prefixValue+$tw.utils.pad(randValue,this.padLength);\\n\\t\\t} else {\\n\\t\\t\\toutput = this.prefixValue+randValue;\\n\\t\\t}\\n\\t} else if(this.padLength) {\\n\\t\\t\\toutput = $tw.utils.pad(randValue,this.padLength);\\n\\t} else {\\n\\t\\t\\toutput = randValue;\\n\\t}\\n\\n\\tthis.actionValue = String(output);\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nRandValWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes[\\\"$tiddler\\\"] || changedAttributes[\\\"$field\\\"] || changedAttributes[\\\"$index\\\"] || changedAttributes[\\\"$lower\\\"] || changedAttributes[\\\"$upper\\\"] || changedAttributes[\\\"$step\\\"] || changedAttributes[\\\"$numrolls\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nRandValWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\tvar self = this;\\n\\tif(typeof this.actionValue === \\\"string\\\") {\\n\\t\\tthis.wiki.setText(this.actionTiddler,this.actionField,this.actionIndex,this.actionValue);\\n\\t}\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"action-randval\\\"] = RandValWidget;\\n\\n})();\\n\",\n            \"title\": \"$:/plugins/OokTech/RandomValue/action-randval.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/plugins/OokTech/RandomValue/readme\": {\n            \"title\": \"$:/plugins/OokTech/RandomValue/readme\",\n            \"text\": \"This plugin contains a widget that generates a random number and stores it in a specified field.\\n\\nThe Widget will take the following inputs\\n\\n|!Attribute |!Description |\\n|$lower |The lower bound of the random numbers generated, defaults to 1. |\\n|$upper |The upper bound on the random numbers generated, defaults to 6. |\\n|$step |The step size of the random numbers generated (that is all random numbers will be in the form rand = lowerBound+n*stepSize where n is an integer and lowerBound <= rand <= upperBound) stepSize defaults to 1 (so integer outputs). If stepSize > upperBound-lowerBound than the output will always be lowerBound |\\n|$numrolls |The number of times to roll a random number and sum the results, defaults to 1 if no value is given. |\\n|$tiddler |The tiddler that will contain the random value, defaults to `<<currentTiddler>>` |\\n|$field |The field of the specified tiddler that will hold the random value, defaults to `store_field`. |\\n|$prefix |An optional prefix to the appended to the front of the output number. No default. |\\n|$length |The minimum length of the output, if the output would be shorter than this than zero padding is used. This will not shorten the output. |\\n\\nThe code will put a random number in the field `fieldName` of the tiddler `tiddlerName`. The number will be the sum of numberOfRolls numbers between `lowerBound` and `upperBound` inclusive.\\n\\n!Example:\\n\\n```\\n<$button>Roll Dice!\\n<$action-randval $field=fieldName/>\\n</$button>\\n```\\n\\nWhen the button is pressed, the code will generate a random integer between 1 and 6 inclusive and store it in the field fieldName. So it is equivalent to rolling a normal 6 sided dice.\\n\\n!How randVal is generated (pseudocode):\\n\\nnum_steps = (upperBound-lowerBound)/stepSize+1\\n\\noutput = 0\\n\\nfor i=1 to num_rolls\\n\\n  n = floor(num_steps*random())\\n\\n  output = output + lowerBound+n*stepSize\\n\\nend\\n\\nreturn output\\n\"\n        }\n    }\n}","name":"RandomValue"}